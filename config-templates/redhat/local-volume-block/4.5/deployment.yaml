---
apiVersion: v1
kind: List
metadata:
  name: local-volume
  namespace: kube-system
  annotations:
    version: local-volume-45
items:
  - apiVersion: v1
    kind: Namespace
    metadata:
      name: local-storage
  - apiVersion: operators.coreos.com/v1alpha2
    kind: OperatorGroup
    metadata:
      name: local-operator-group
      namespace: local-storage
    spec:
      targetNamespaces:
        - local-storage
  - apiVersion: operators.coreos.com/v1alpha1
    kind: Subscription
    metadata:
      name: local-storage-operator
      namespace: local-storage
    spec:
      channel: "4.6"
      installPlanApproval: Automatic
      name: local-storage-operator
      source: redhat-operators
      sourceNamespace: openshift-marketplace
  - apiVersion: local.storage.openshift.io/v1
    kind: LocalVolume
    metadata:
      name: local-disk
      namespace: local-storage
    spec:
      nodeSelector:
        nodeSelectorTerms:
          - matchExpressions:
              - key: storage #"{{ label-key }}"
                operator: In
                values:
                  - localvol
                  # - "{{ label-value }}"
      storageClassDevices:
        - storageClassName: "sat-local-block-gold"
          volumeMode: Block
          devicePaths:
            - /dev/xvdc
            # {{#devicepath}}
            # - "{{{ item }}}"
            # {{/devicepath}}
  # - apiVersion: v1
  #   kind: Namespace
  #   metadata:
  #     labels:
  #       control-plane: controller-manager
  #     name: system
  - apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: v0.4.1
      creationTimestamp: null
      name: cleanupoperators.cleanup.ibm.com
    spec:
      group: cleanup.ibm.com
      names:
        kind: CleanUpOperator
        listKind: CleanUpOperatorList
        plural: cleanupoperators
        singular: cleanupoperator
      scope: Namespaced
      versions:
      - name: v1
        schema:
          openAPIV3Schema:
            description: CleanUpOperator is the Schema for the cleanupoperators API
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: CleanUpOperatorSpec defines the desired state of CleanUpOperator
                properties:
                  namespace:
                    type: string
                  resourceName:
                    description: Foo is an example field of CleanUpOperator. Edit cleanupoperator_types.go
                      to remove/update Foo string `json:"foo,omitempty"`
                    type: string
                  resources:
                    items:
                      properties:
                        name:
                          type: string
                        namespace:
                          type: string
                        type:
                          type: string
                      type: object
                    type: array
                required:
                - namespace
                - resourceName
                type: object
              status:
                description: CleanUpOperatorStatus defines the observed state of CleanUpOperator
                type: object
            type: object
        served: true
        storage: true
        subresources:
          status: {}
    # status:
    #   acceptedNames:
    #     kind: ""
    #     plural: ""
    #   conditions: []
    #   storedVersions: []
  # - apiVersion: v1
  #   kind: ServiceAccount
  #   metadata:
  #     name: bhagya-manager
  #     namespace: system
  # - apiVersion: v1
  #   kind: ServiceAccount
  #   metadata:
  #     name: controller-manager
  #     namespace: system
  # - apiVersion: rbac.authorization.k8s.io/v1
  #   kind: Role
  #   metadata:
  #     name: leader-election-role
  #   rules:
  #   - apiGroups:
  #     - ""
  #     - coordination.k8s.io
  #     resources:
  #     - configmaps
  #     - leases
  #     verbs:
  #     - get
  #     - list
  #     - watch
  #     - create
  #     - update
  #     - patch
  #     - delete
  #   - apiGroups:
  #     - ""
  #     resources:
  #     - events
  #     verbs:
  #     - create
  #     - patch
  # - apiVersion: rbac.authorization.k8s.io/v1
  #   kind: ClusterRole
  #   metadata:
  #     creationTimestamp: null
  #     name: manager-role
  #   rules:
  #   - apiGroups:
  #     - cleanup.ibm.com
  #     resources:
  #     - cleanupoperators
  #     verbs:
  #     - create
  #     - delete
  #     - get
  #     - list
  #     - patch
  #     - update
  #     - watch
  #   - apiGroups:
  #     - cleanup.ibm.com
  #     resources:
  #     - cleanupoperators/finalizers
  #     verbs:
  #     - update
  #   - apiGroups:
  #     - cleanup.ibm.com
  #     resources:
  #     - cleanupoperators/status
  #     verbs:
  #     - get
  #     - patch
  #     - update
  # - apiVersion: rbac.authorization.k8s.io/v1
  #   kind: ClusterRole
  #   metadata:
  #     name: metrics-reader
  #   rules:
  #   - nonResourceURLs: ["/metrics"]
  #     verbs: ["get"]
  # - apiVersion: rbac.authorization.k8s.io/v1
  #   kind: ClusterRole
  #   metadata:
  #     name: proxy-role
  #   rules:
  #   - apiGroups: ["authentication.k8s.io"]
  #     resources:
  #     - tokenreviews
  #     verbs: ["create"]
  #   - apiGroups: ["authorization.k8s.io"]
  #     resources:
  #     - subjectaccessreviews
  #     verbs: ["create"]
  # - apiVersion: rbac.authorization.k8s.io/v1
  #   kind: ClusterRole
  #   metadata:
  #     creationTimestamp: null
  #     name: role
  #   rules:
  #   - apiGroups:
  #     - cleanup.ibm.com
  #     resources:
  #     - '*'
  #     verbs:
  #     - create
  #     - delete
  #     - get
  #     - list
  #     - patch
  #     - update
  #     - watch
  #   - apiGroups:
  #     - cleanup.ibm.com
  #     resources:
  #     - cleanupoperators/cleanups
  #     verbs:
  #     - update
  #   - apiGroups:
  #     - cleanup.ibm.com
  #     resources:
  #     - cleanupoperators/status
  #     verbs:
  #     - get
  #     - patch
  #     - update
  #   - apiGroups:
  #     - ""
  #     resources:
  #     - pods
  #     - services
  #     - endpoints
  #     - persistentvolumeclaims
  #     - events
  #     - configmaps
  #     - secrets
  #     - helmcharts
  #     verbs:
  #     - '*'
  #   - apiGroups:
  #     - ""
  #     resources:
  #     - namespaces
  #     verbs:
  #     - get
  #     - list
  #     - create
  #     - update
  #     - delete
  #     - watch
  #     - patch
  #   - apiGroups:
  #     - "coordination.k8s.io"
  #     resources:
  #     - leases
  #     verbs:
  #     - '*'
  #   - apiGroups:
  #     - apps
  #     resources:
  #     - deployments
  #     - daemonsets
  #     - replicasets
  #     - statefulsets
  #     verbs:
  #     - '*'
  #   - apiGroups:
  #     - monitoring.coreos.com
  #     resources:
  #     - servicemonitors
  #     verbs:
  #     - get
  #     - create
  #   - apiGroups:
  #     - security.openshift.io
  #     resourceNames:
  #     - privileged
  #     resources:
  #     - securitycontextconstraints
  #     verbs:
  #     - use
  #   - apiGroups: [""]
  #     resources: ["persistentvolumeclaims"]
  #     verbs: ["get", "list", "watch", "update"]
  #   - apiGroups: [""]
  #     resources: ["helmchart"]
  #     verbs: ["get", "list", "watch"]
  #   - apiGroups: [""]
  #     resources: ["persistentvolumeclaims/status"]
  #     verbs: ["update", "patch"]
  #   - apiGroups: [""]
  #     resources: ["persistentvolumes"]
  #     verbs: ["get", "list", "watch", "update", "create", "delete", "patch"]
  #   - apiGroups: [""]
  #     resources: ["events"]
  #     verbs: ["list", "watch", "create", "update", "patch"]
  #   - apiGroups: ["storage.k8s.io"]
  #     resources: ["storageclasses"]
  #     verbs: ["create", "get", "list", "watch", "delete", "patch"]
  #   - apiGroups: ["storage.k8s.io"]
  #     resources: ["csidrivers"]
  #     verbs: ["create", "get", "list", "watch", "delete", "patch"]
  #   - apiGroups: ["storage.k8s.io"]
  #     resources: ["volumeattachments"]
  #     verbs: ["get", "list", "watch", "update", "patch"]
  #   - apiGroups: ["storage.k8s.io"]
  #     resources: ["volumeattachments/status"]
  #     verbs: ["update", "patch"]
  #   - apiGroups: ["snapshot.storage.k8s.io"]
  #     resources: ["volumesnapshots"]
  #     verbs: ["get", "list"]
  #   - apiGroups: ["snapshot.storage.k8s.io"]
  #     resources: ["volumesnapshotcontents"]
  #     verbs: ["get", "list"]
  #   - apiGroups: ["storage.k8s.io"]
  #     resources: ["csinodes"]
  #     verbs: ["get", "list", "watch"]
  #   - apiGroups: ["csi.storage.k8s.io"]
  #     resources: ["csinodeinfos"]
  #     verbs: ["get", "list", "watch"]
  #   - apiGroups: [""]
  #     resources: ["nodes"]
  #     verbs: ["get", "list", "watch"]
  #   - apiGroups: [""]
  #     resources: ["configmaps"]
  #     verbs: ["get", "list", "watch"]
  #   - apiGroups: [""]
  #     resources: ["endpoints"]
  #     verbs: ["get", "list", "watch", "create", "update", "patch"]
  #   - apiGroups: []
  #     nonResourceURLs: ["/version"]
  #     verbs: ["get"]
  #   - apiGroups: [""]
  #     resources: ["secrets"]
  #     verbs: ["get"]
  #   - apiGroups: ["extensions"]
  #     resources: ["deployments"]
  #     verbs: [ "create", "get", "list", "watch", "delete"]
  #   - apiGroups: ["extensions"]
  #     resources: ["daemonsets"]
  #     verbs: [ "create", "get", "list", "watch", "delete"]
  #   - apiGroups: ["rbac.authorization.k8s.io"]
  #     resources: ["clusterrolebindings"]
  #     verbs: ["create", "patch", "get", "watch", "list", "delete"]
  #   - apiGroups: ["rbac.authorization.k8s.io"]
  #     resources: ["clusterroles"]
  #     verbs: ["create", "patch", "get", "list", "watch", "delete"]
  #   - apiGroups: ["rbac.authorization.k8s.io"]
  #     resources: ["rolebindings"]
  #     verbs: ["create", "patch", "get", "watch", "list", "delete"]
  #   - apiGroups: ["rbac.authorization.k8s.io"]
  #     resources: ["roles"]
  #     verbs: ["create", "patch", "get", "list", "watch", "delete"]
  #   - apiGroups: [""]
  #     resources: ["serviceaccounts"]
  #     verbs: ["create", "patch", "get", "list", "watch", "delete"]
  #   - apiGroups: [""]
  #     resources: ["pods/log"]
  #     verbs: ["get", "list"]
  #   - apiGroups: ["security.openshift.io"]
  #     resources: ["securitycontextconstraints"]
  #     verbs: ["get", "list", "create", "update", "patch", "delete"]
  #   - apiGroups: ["operators.coreos.com"]
  #     resources: ["operatorgroups"]
  #     verbs: ["watch", "get", "list", "create", "delete"]
  #   - apiGroups: ["operators.coreos.com"]
  #     resources: ["subscriptions"]
  #     verbs: ["watch", "get", "list", "create", "delete"]
  #   - apiGroups: ["local.storage.openshift.io"]
  #     resources: ["localvolumes"]
  #     verbs: ["watch", "get", "list", "create", "delete", "patch", "update"]
  #   - apiGroups: ["apiextensions.k8s.io"]
  #     resources: ["customresourcedefinitions"]
  #     verbs: ["watch", "get", "list", "create", "delete", "patch"]
  #   - apiGroups: ["policy"]
  #     resources: ["podsecuritypolicies"]
  #     verbs: ["watch", "get", "list", "create", "delete"]
  #   - apiGroups: ["trident.netapp.io"]
  #     resources: ["tridentprovisioners"]
  #     verbs: ["watch", "get", "list", "create", "delete", "patch"]
  # - apiVersion: rbac.authorization.k8s.io/v1
  #   kind: RoleBinding
  #   metadata:
  #     name: leader-election-rolebinding
  #   roleRef:
  #     apiGroup: rbac.authorization.k8s.io
  #     kind: Role
  #     name: leader-election-role
  #   subjects:
  #   - kind: ServiceAccount
  #     name: controller-manager
  #     namespace: system
  # - apiVersion: rbac.authorization.k8s.io/v1
  #   kind: ClusterRoleBinding
  #   metadata:
  #     name: manager-rolebinding
  #   roleRef:
  #     apiGroup: rbac.authorization.k8s.io
  #     kind: ClusterRole
  #     name: manager-role
  #   subjects:
  #   - kind: ServiceAccount
  #     name: controller-manager
  #     namespace: system
  # - apiVersion: rbac.authorization.k8s.io/v1
  #   kind: ClusterRoleBinding
  #   metadata:
  #     name: proxy-rolebinding
  #   roleRef:
  #     apiGroup: rbac.authorization.k8s.io
  #     kind: ClusterRole
  #     name: proxy-role
  #   subjects:
  #   - kind: ServiceAccount
  #     name: controller-manager
  #     namespace: system
  # - apiVersion: rbac.authorization.k8s.io/v1
  #   kind: ClusterRoleBinding
  #   metadata:
  #     name: rolebinding
  #   roleRef:
  #     apiGroup: rbac.authorization.k8s.io
  #     kind: ClusterRole
  #     name: role
  #   subjects:
  #     - kind: ServiceAccount
  #       name: bhagya-manager
  #       namespace: system
  # - apiVersion: v1
  #   kind: ConfigMap
  #   data: 
  #     controller_manager_config.yaml: |
  #       apiVersion: controller-runtime.sigs.k8s.io/v1alpha1
  #       kind: ControllerManagerConfig
  #       health:
  #         healthProbeBindAddress: :8081
  #       metrics:
  #         bindAddress: 127.0.0.1:8080
  #       webhook:
  #         port: 9443
  #       leaderElection:
  #         leaderElect: true
  #         resourceName: e9d90034.ibm.com
  #   metadata:
  #     name: manager-config
  #     namespace: system
  # - apiVersion: v1
  #   kind: Service
  #   metadata:
  #     labels:
  #       control-plane: controller-manager
  #     name: controller-manager-metrics-service
  #     namespace: system
  #   spec:
  #     ports:
  #     - name: https
  #       port: 8443
  #       targetPort: https
  #     selector:
  #       control-plane: controller-manager
  # - apiVersion: apps/v1
  #   kind: Deployment
  #   metadata:
  #     name: controller-manager
  #     namespace: system
  #     labels:
  #       control-plane: controller-manager
  #   spec:
  #     selector:
  #       matchLabels:
  #         control-plane: controller-manager
  #     replicas: 1
  #     template:
  #       metadata:
  #         labels:
  #           control-plane: controller-manager
  #       spec:
  #         securityContext:
  #           runAsNonRoot: true
  #         containers:
  #         - name: kube-rbac-proxy
  #           image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
  #           imagePullPolicy: IfNotPresent
  #           args:
  #           - "--secure-listen-address=0.0.0.0:8443"
  #           - "--upstream=http://127.0.0.1:8080/"
  #           - "--logtostderr=true"
  #           - "--v=10"
  #           ports:
  #           - containerPort: 8443
  #             name: https
  #             protocol: TCP
  #         - name: manager
  #           args:
  #           - "--health-probe-bind-address=:8081"
  #           - "--metrics-bind-address=127.0.0.1:8080"
  #           - "--leader-elect"
  #           command:
  #           - /manager
  #           securityContext:
  #             allowPrivilegeEscalation: false
  #           image: ashima27/cleanup:14
  #           # image: controller:latest
  #           imagePullPolicy: IfNotPresent
  #           livenessProbe:
  #             httpGet:
  #               path: /healthz
  #               port: 8081
  #             initialDelaySeconds: 15
  #             periodSeconds: 20
  #           readinessProbe:
  #             httpGet:
  #               path: /readyz
  #               port: 8081
  #             initialDelaySeconds: 5
  #             periodSeconds: 10
  #           resources:
  #             limits:
  #               cpu: 200m
  #               memory: 130Mi
  #             requests:
  #               cpu: 200m
  #               memory: 120Mi
  #         serviceAccountName: bhagya-manager
  #         terminationGracePeriodSeconds: 10
  # - apiVersion: security.openshift.io/v1
  #   kind: SecurityContextConstraints
  #   metadata:
  #     name: scc
  #   priority: 0
  #   defaultAddCapabilities: []
  #   allowedCapabilities: []
  #   allowHostDirVolumePlugin: true
  #   allowHostIPC: false
  #   allowHostPID: false
  #   allowHostPorts: false
  #   allowHostNetwork: true
  #   allowPrivilegedContainer: false
  #   allowPrivilegeEscalation: true
  #   requiredDropCapabilities:
  #     - KILL
  #     - MKNOD
  #     - SETUID
  #     - SETGID
  #   readOnlyRootFilesystem: false
  #   runAsUser:
  #     type: RunAsAny
  #   seLinuxContext:
  #     type: RunAsAny
  #   fsGroup:
  #     type: RunAsAny
  #   supplementalGroups:
  #     type: RunAsAny
  #   users:
  #     - system:serviceaccount:system:bhagya-manager
  #   groups: []
  # - apiVersion: monitoring.coreos.com/v1
  #   kind: ServiceMonitor
  #   metadata:
  #     labels:
  #       control-plane: controller-manager
  #     name: controller-manager-metrics-monitor
  #     namespace: system
  #   spec:
  #     endpoints:
  #       - path: /metrics
  #         port: https
  #         scheme: https
  #         bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
  #         tlsConfig:
  #           insecureSkipVerify: true
  #     selector:
  #       matchLabels:
  #         control-plane: controller-manager
  # - apiVersion: apps/v1
  #   kind: Deployment
  #   metadata:
  #     name: cleanup-operator
  #     namespace: system
  #   spec:
  #     replicas: 1
  #     selector:
  #       matchLabels:
  #         app: cleanup
  #     template:
  #       metadata:
  #         labels:
  #           app: cleanup
  #       spec:
  #         containers:
  #           - name: local-volume-cleanup
  #             image: ashima27/cleanup:14
  #             imagePullPolicy: IfNotPresent
  # - apiVersion: cleanup.ibm.com/v1
  #   kind: CleanUpOperator
  #   metadata:
  #     name: cleanupoperator-sample
  #   spec:
  #     resourceName: "local-volume"
  #     namespace: "local-storage"
  #     resources: 
  #       - type: "deployment"
  #         name: "local-storage-operator"
  #         namespace: "local-storage"
  #       - type: "localvolume"
  #         name: "local-disk"
  #         namespace: "local-storage"